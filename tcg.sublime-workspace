{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"for",
				"fori	for i,v in ipairs()"
			],
			[
				"tab",
				"table.insert	(table, [pos,] value)"
			],
			[
				"fro",
				"fori	for i,v in ipairs()"
			],
			[
				"table",
				"table.insert	(table, [pos,] value)"
			],
			[
				"print",
				"love.graphics.print"
			],
			[
				"setc",
				"love.graphics.setColor"
			],
			[
				"attackCa",
				"attackCardAll"
			],
			[
				"newim",
				"love.graphics.newImage"
			],
			[
				"getdt",
				"love.timer.getDelta"
			],
			[
				"transl",
				"love.graphics.translate"
			],
			[
				"show",
				"showTag"
			],
			[
				"recet",
				"love.graphics.rectangle"
			],
			[
				"isd",
				"love.mouse.isDown"
			],
			[
				"font_",
				"font_content"
			],
			[
				"random",
				"love.math.random"
			],
			[
				"newf",
				"love.graphics.newFont"
			],
			[
				"setline",
				"love.graphics.setLineWidth"
			],
			[
				"hoverc",
				"hoverColor"
			],
			[
				"faction",
				"factions"
			],
			[
				"tabl",
				"table.insert	(table, [pos,] value)"
			],
			[
				"cancel",
				"cancelAttack"
			],
			[
				"hoverC",
				"hoverColor"
			],
			[
				"imag",
				"love.graphics.newImage"
			],
			[
				"canva",
				"love.graphics.newCanvas"
			],
			[
				"img_",
				"img_shield"
			],
			[
				"shield",
				"shield_max"
			],
			[
				"circ",
				"love.graphics.circle"
			],
			[
				"font",
				"love.graphics.setFont"
			],
			[
				"library",
				"libraryData"
			],
			[
				"mssage",
				"message_id"
			],
			[
				"CARD_",
				"CARD_WIDTH"
			],
			[
				"message",
				"message_id"
			],
			[
				"get_",
				"get_position"
			],
			[
				"ray_",
				"ray_norm"
			],
			[
				"ray_w",
				"ray_w4"
			],
			[
				"client_",
				"client_port"
			],
			[
				"getr",
				"love.math.getRandomState"
			],
			[
				"setr",
				"love.math.setRandomState"
			],
			[
				"seed",
				"love.math.setRandomSeed"
			],
			[
				"search",
				"searchForCreate"
			],
			[
				"check",
				"checkSkull"
			],
			[
				"os",
				"os.time	([table])"
			],
			[
				"rad",
				"love.math.setRandomSeed"
			],
			[
				"we",
				"while	while cond"
			],
			[
				"dr",
				"draw()	cell"
			],
			[
				"setcl",
				"love.graphics.setColor"
			],
			[
				"gr",
				"love.graphics.rectangle"
			],
			[
				"new",
				"love.graphics.newParticleSystem"
			],
			[
				"upa",
				"unpack	(list [, i [, j]])"
			],
			[
				"ta",
				"table.insert	(table, [pos,] value)"
			],
			[
				"drawf",
				"drawFromOpDeck"
			],
			[
				"selfk",
				"selfkill10"
			],
			[
				"onAtta",
				"onAttack"
			],
			[
				"attack",
				"attackweak"
			],
			[
				"alway",
				"cardsAlways_update"
			],
			[
				"string",
				"string.find	(s, pattern [, init [, plain]])"
			],
			[
				"get",
				"love.graphics.getWidth"
			],
			[
				"rand",
				"love.math.random"
			],
			[
				"up",
				"unpack	(list [, i [, j]])"
			],
			[
				"cost_",
				"cost_lvl0"
			],
			[
				"inter",
				"interceptTab"
			],
			[
				"minion",
				"minionTab"
			],
			[
				"abilit",
				"abilities"
			],
			[
				"upperT",
				"upperTurnOver"
			],
			[
				"mouse",
				"love.mouse.getPosition"
			],
			[
				"refill",
				"refillCard"
			],
			[
				"rado",
				"love.math.random"
			],
			[
				"push",
				"love.graphics.push"
			],
			[
				"getpo",
				"love.mouse.getPosition"
			],
			[
				"dra",
				"love.graphics.draw"
			],
			[
				"set",
				"love.graphics.setFont"
			],
			[
				"can",
				"love.graphics.newCanvas"
			],
			[
				"pic_",
				"pic_front"
			],
			[
				"draw",
				"love.graphics.draw"
			],
			[
				"ve",
				"vec4"
			],
			[
				"vec",
				"vec2"
			],
			[
				"rect",
				"love.graphics.rectangle"
			],
			[
				"v",
				"vec4"
			],
			[
				"setsh",
				"love.graphics.setShader"
			],
			[
				"shad",
				"love.graphics.newShader"
			],
			[
				"to",
				"tostring	(e)"
			],
			[
				"setb",
				"love.graphics.setBackgroundColor"
			],
			[
				"fon",
				"love.graphics.setFont"
			],
			[
				"pri",
				"love.graphics.print"
			],
			[
				"func",
				"function	function"
			]
		]
	},
	"buffers":
	[
		{
			"file": "cls/game.lua",
			"settings":
			{
				"buffer_size": 26189,
				"line_ending": "Windows"
			}
		},
		{
			"file": "cards/endazu/incantations/beholdtheveil.lua",
			"settings":
			{
				"buffer_size": 674,
				"line_ending": "Windows",
				"name": "beholdtheveil.lua"
			}
		},
		{
			"contents": "local card = Class(\"card\")\nlocal Width = 210\nlocal Height = 312\n\nlocal img_hp = love.graphics.newImage(\"res/others/hp.png\")\nlocal img_shield = love.graphics.newImage(\"res/others/shield.png\")\nlocal img_wait  = love.graphics.newImage(\"res/others/wait.png\")\nlocal rare_1 = love.graphics.newImage(\"res/others/rare-1.png\")\nlocal rare_2 = love.graphics.newImage(\"res/others/rare-2.png\")\nlocal rare_3 = love.graphics.newImage(\"res/others/rare-3.png\")\nlocal rare_4 = love.graphics.newImage(\"res/others/rare-4.png\")\nlocal rare_h = love.graphics.newImage(\"res/others/rare-hero.png\")\nlocal rare_e = love.graphics.newImage(\"res/others/rare-5.png\")\nlocal img_gold = love.graphics.newImage(\"res/others/gold.png\")\nlocal img_back = {\n	normal = love.graphics.newImage(\"res/assets/cardback.png\"),\n	silver = love.graphics.newImage(\"res/assets/cardbacksilver.png\"),\n	gold = love.graphics.newImage(\"res/assets/cardbackgold.png\"),\n}\n\nlocal img_frame = {\n	love.graphics.newImage(\"res/assets/cardframe-normal.png\"),\n	love.graphics.newImage(\"res/assets/cardframe-silver.png\"),\n	love.graphics.newImage(\"res/assets/cardframe-gold.png\"),\n}\n\n\nlocal cardImage = {}\nlocal font_title = love.graphics.newFont(30)\nlocal font_content = love.graphics.newFont(20)\n\n\nfunction card:init(game,data,born,current,state)\n	self.game = game\n	self.born = game[born]\n	self.current = current\n	self.data = data\n	self:initProperty(data)\n	self:initImage()\n	self:updateCanvas()\n	self:initBack()\n	self.tweens={}\n	self.tweenStack = {}\n	if state then card:setState(state) end\nend\n\nfunction card:setState(state)\n	self.hp = state.hp\n	self.last = state.last\n	self.shield = state.shield\n	self.charge = state.charge\n	self:updateCanvas()\nend\n\n\nfunction card:reset()\n	self.hp = self.data.hp\n	self.last = self.data.last\n	self.shield = self.data.shield\n	self.charge = self.data.chargeInit\n	self:updateCanvas()\nend\n\n\nfunction card:initProperty(data)\n	for k,v in pairs(data) do\n		self[k]=v\n	end\n	self.hp_max = self.hp\n	self.shield_max = self.shield\n	self.charge_max = self.chargeMax\n	self.charge = self.chargeInit\n	self.level = self.level or 1\n	if self.level then\n		self.price = self.basePrice and self.basePrice - self.level + 1\n	end\n\n	self.x = self.current.x or 0\n	self.y = self.current.y or 0\n	self.rz = self.current.rz or 0\n	self.rx = self.current.rx or 0\n	self.ry = self.current.ry or 0\n	self.scale = self.current.scale or 0.5\n	self.w = Width\n	self.h = Height\n	self.vduration=0\n	self.offx=0\n	self.offy=0\n	self.alpha = 255\n	self.cardback = self.back and img_back[self.back] or img_back.normal\nend\n\nlocal textHeight = 150\nfunction card:initBack()\n	local tw = self.cardback:getWidth()\n	local th = self.cardback:getHeight()\n	self.back = love.graphics.newCanvas(Width,Height)\n	love.graphics.setCanvas(self.back)\n	love.graphics.setColor(255, 255, 255, 255)\n	love.graphics.draw(self.cardback, 0, 0, 0, Width/tw,Height/th)\n	love.graphics.setCanvas()\nend\n\nlocal count = 0\n\nfunction card:initImage()\n	if not cardImage[self.id] then\n		cardImage[self.id]= love.graphics.newImage(\"res/cards/\"..self.id..\".png\")\n		count = count+1\n	end\n		\n	self.img = cardImage[self.id]\n\n	self.tw = self.img:getWidth()\n	self.th = self.img:getHeight()\n	self.predraw  = love.graphics.newCanvas(Width,Height)\n\n	\nend\n\n\n\n\nlocal hw =Width/2\nlocal hh =Height/2\n\nfunction card:checkHover()\n	--if self.tweens.x or self.tweens.y then return end\n\n	local dx,dy = self.game.mousex-self.x,self.game.mousey-self.y\n	local rx,ry = math.axisRot(dx,dy,-self.rz)\n\n	local mx,my = rx/self.scale/math.cos(self.ry),ry/self.scale/math.cos(self.rx)\n	\n	if mx>hw then return end\n	if mx<-hw then return end\n	if my>hh then return end\n	if my<-hh then return end\n	return true\nend\n\nfunction card:update(dt)\n\n	self:vibrateUpdate(dt)\n\n	self:updateTweens(dt)\n	\n	if self:checkHover() then self.game.hoverCard = self end\n	\n\nend\n\nfunction card:updateTweens(dt)\n	for k,v in pairs(self.tweens) do\n		if v:update(dt) then\n			local tween = self.tweenStack[k] and self.tweenStack[k][1]\n			if tween then\n				self.tweens[k] = tween\n				table.remove(self.tweenStack[k], 1)\n			else\n				self.tweens[k] = nil\n			end\n		end\n	end\nend\n\nfunction card:addAnimate(duration , target , easing , delay, callback)\n	for k,v in pairs(target) do\n		local tween = Tween.new(duration, self, {[k]=v}, easing, delay)\n		if self.tweens[k] then\n			self.tweenStack[k] = self.tweenStack[k] or {}\n			table.insert(self.tweenStack[k], tween)\n		else\n			self.tweens[k] = tween\n		end		\n		if callback then tween.callback = callback end\n	end\nend\n\nfunction card:setAnimate(duration , target , easing , delay, callback)\n	for k,v in pairs(target) do\n		local tween = Tween.new(duration, self, {[k]=v}, easing, delay)\n		self.tweens[k] = tween\n		self.tweenStack[k] =  {}	\n		tween.callback = function () \n			if callback then callback() end\n		end\n	end\nend\n\n\nfunction card:draw(color)\n	love.graphics.setColor(255, 255, 255, self.alpha)\n	if color then love.graphics.setColor(color) end\n	if math.cos(self.ry)<0 or math.cos(self.rx)<0 then\n		love.graphics.draw(self.back, self.x+self.offx, self.y+self.offy, self.rz,\n		 self.scale*math.cos(self.ry), -self.scale*math.cos(self.rx), Width/2, Height/2)\n	else\n		love.graphics.draw(self.predraw, self.x+self.offx, self.y+self.offy, self.rz,\n		 self.scale*math.cos(self.ry), self.scale*math.cos(self.rx), Width/2, Height/2)\n	end\n	\nend\n\nfunction card:needRedraw()\n	if self.hp == self.ohp and self.shield == self.oshield and self.last == self.olast then\n		return false\n	end\n\n	self.ohp = self.hp\n	self.shield = self.oshield\n	self.last = self.olast\n	return true\nend\n\nlocal mask_shader = love.graphics.newShader [[\n   vec4 effect(vec4 color, Image texture, vec2 texture_coords, vec2 screen_coords) {\n      if (Texel(texture, texture_coords).a == 0.0) {\n         // a discarded pixel wont be applied as the stencil.\n         discard;\n      }\n      return vec4(1.0);\n   }\n]]\n\n\nfunction card:updateCanvas()\n	love.graphics.setColor(255,255,255,255)\n	love.graphics.setCanvas(self.predraw)\n	--bg\n	local function myStencilFunction()\n		love.graphics.setShader(mask_shader)\n		love.graphics.draw(self.cardback, 0, 0, 0, Width/self.tw,Height/self.th)\n		love.graphics.setShader()\n	end\n	love.graphics.stencil(myStencilFunction, \"replace\", 1)\n    love.graphics.setStencilTest(\"greater\", 0)\n    love.graphics.draw(self.img, 0, 0, 0, Width/self.tw,Height/self.th)\n    love.graphics.setStencilTest()\n\n\n	\n	--border\n	if img_frame[self.level] then\n		love.graphics.setColor(255, 255, 255, 255)\n		love.graphics.draw(img_frame[self.level],0, 0, 0, Width/self.tw,Height/self.th)\n	end\n\n\n	--title\n	love.graphics.setFont(font_title)\n	love.graphics.setColor(0, 0, 0, 255)\n	love.graphics.printf(self.name, 3, 8, Width, \"center\")\n	love.graphics.setColor(255,255,255,255)\n	love.graphics.printf(self.name, 0, 5, Width, \"center\")\n	\n	--description\n	\n	love.graphics.setFont(font_content)\n	for i,text in ipairs(self.description) do\n		love.graphics.setColor(0,0,0,255)\n		love.graphics.printf(text, 3, (i-1)*20+textHeight/(#self.description+1)+ 180 + 3, Width, \"center\")\n		love.graphics.setColor(255,255,255,255)\n		love.graphics.printf(text, 0, (i-1)*20+textHeight/(#self.description+1)+ 180, Width, \"center\")\n	end\n	--price\n	if self.price then\n		love.graphics.setColor(255, 255, 255,255)\n		--love.graphics.circle(\"fill\", 195, 20, 15)\n		love.graphics.draw(img_gold, 177, 10,0,1.3,1.3)\n		love.graphics.setFont(font_content)\n		love.graphics.setColor(0, 0, 0,255)\n		love.graphics.printf(self.price, 177, 11, 30, \"center\")\n		love.graphics.setColor(0, 0, 0,255)\n		love.graphics.printf(self.price, 176, 11, 30, \"center\")\n		love.graphics.setColor(0, 0, 255,255)\n		love.graphics.printf(self.price, 175, 11, 30, \"center\")\n	end\n	--rare\n	if self.rare then\n		love.graphics.setColor(255, 255, 255, 255)\n		--love.graphics.circle(\"fill\", 15, 160, 15)\n		if self.rare == 1 then\n			love.graphics.draw(rare_1, 5,150)\n		elseif self.rare == 2 then\n			love.graphics.draw(rare_2, 5,150)\n		elseif self.rare == 3 then\n			love.graphics.draw(rare_3, 5,150)\n		elseif self.rare == 4 then\n			love.graphics.draw(rare_4, 5,150)\n		elseif self.rare == \"hero\" then\n			love.graphics.draw(rare_h, 5,150)\n		end\n	end\n\n\n	\n\n	\n	if self.hp then\n		love.graphics.setColor(100, 100, 100, 255)\n		for i =1 , self.hp_max do\n			love.graphics.draw(img_hp, 118 - self.hp_max*17 + (i-1)*17, 285)\n		end\n		love.graphics.setColor(255,255,255,255)\n		for i =1 , self.hp do\n			love.graphics.draw(img_hp, 118 - self.hp_max*17 + (i-1)*17, 285)\n		end\n	end\n\n	--shield\n	if self.shield then\n		love.graphics.setColor(100, 100, 100, 255)\n		for i =1 , self.shield_max do\n			love.graphics.draw(img_shield,100 - self.shield_max*17 - (i-1)*17 , 285)\n		end\n		love.graphics.setColor(255,255,255,255)\n		for i =1 , self.shield do\n			love.graphics.draw(img_shield,100 - self.shield_max*17 - (i-1)*17 , 285)\n		end\n	end\n\n\n	--last \n\n	if self.last and type(self.last) == \"number\" then\n		love.graphics.setColor(255,255,255,255)\n		love.graphics.setFont(font_content)\n		love.graphics.draw(img_wait, 80, 283)\n		love.graphics.printf(\"x\"..tostring(self.last), 100, 283, Width, \"left\")\n	end\n\n	love.graphics.setCanvas()\n\nend\n\n\n\nfunction card:vibrate(duration, magnitude,vfunc)\n    self.vduration, self.vMagnitude = duration or 0.3, magnitude or 5\n    self.vfunc = vfunc\nend\n\n\nfunction card:vibrateUpdate(dt)\n	if self.vduration<=0 then return end\n	self.vduration = self.vduration -dt\n	self.vMagnitude = self.vMagnitude*0.98\n	self.offx = love.math.random(-self.vMagnitude, self.vMagnitude)\n    self.offy = love.math.random(-self.vMagnitude, self.vMagnitude)\n    if self.vduration<=0 then \n    	self.offx=0\n    	self.offy=0\n    	if self.vfunc then self.vfunc() end\n    end\nend\n\nfunction card:standout()\n	local tween = self.tweenStack.y and self.tweenStack.y[#self.tweenStack.y]\n	local y\n	if tween then \n		y = tween.target.y\n	elseif self.tweens.y then\n		y = self.tweens.y.target.y\n	else\n		y = self.y\n	end \n	local ty = y>0 and y-50 or y+50\n\n	self:setAnimate(0.3,{y=ty},\"linear\")\n	self:addAnimate(0.3,{y=y},\"linear\")\nend\n\nfunction card:turnaround()\n	self:setAnimate(0.3,{rx=3.14},\"linear\")\n	self:addAnimate(0.3,{rx=0},\"linear\")\nend\n\nreturn card",
			"file": "cls/card.lua",
			"file_size": 10307,
			"file_write_time": 131145157995434409,
			"settings":
			{
				"buffer_size": 10062,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Add Channel"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"",
				"Build: Run"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			]
		],
		"width": 408.0
	},
	"console":
	{
		"height": 140.0,
		"history":
		[
			"Love2D",
			"love2d",
			"build",
			"Build",
			"Love2D",
			"Love2d",
			"love2d",
			"build"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/Love2D Project/loveTCG",
		"/F/Love2D Project/loveTCG/cards",
		"/F/Love2D Project/loveTCG/cards/daramek",
		"/F/Love2D Project/loveTCG/cards/endazu",
		"/F/Love2D Project/loveTCG/cards/endazu/incantations",
		"/F/Love2D Project/loveTCG/cards/vespitole/hero",
		"/F/Love2D Project/loveTCG/cards/vespitole/prosperity",
		"/F/Love2D Project/loveTCG/cls"
	],
	"file_history":
	[
		"/F/Love2D Project/loveTCG/cards/metris/hero/theodox.lua",
		"/F/Love2D Project/loveTCG/cards/metris/hero/gretta.lua",
		"/F/Love2D Project/loveTCG/cards/metris/hero/birondelle.lua",
		"/F/Love2D Project/loveTCG/cards/metris/hero/loquori.lua",
		"/F/Love2D Project/loveTCG/cards/metris/hero/valdorian.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/charlatan.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/cutpurse.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/tavernwench.lua",
		"/F/Love2D Project/loveTCG/cards/metris/conspiracy/coordinate.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/prosperity/vintner.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/apothecary.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/bodyguard.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/assassin.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/lackey.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/informent.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/brute.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/burglary.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/stolenplans.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/misinformation.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/ramsack.lua",
		"/C/Users/Alexar/Desktop/screenshot/system.txt",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/impersonate.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/roberry.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/sabotage.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/surveillance.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/embezzle.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/reconnaissance.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/forgery.lua",
		"/F/Love2D Project/loveTCG/cards/metris/coin/metriscoin.lua",
		"/F/Love2D Project/loveTCG/cards/metris/conspiracy/stratagem.lua",
		"/F/Love2D Project/loveTCG/cards/metris/conspiracy/infiltrate.lua",
		"/F/Love2D Project/loveTCG/cards/metris/conspiracy/cleverplanning.lua",
		"/F/Love2D Project/loveTCG/cards/metris/conspiracy/consolidate.lua",
		"/F/Love2D Project/loveTCG/cards/metris/murder/barrelbomb.lua",
		"/F/Love2D Project/loveTCG/cards/metris/murder/satchelbomb.lua",
		"/F/Love2D Project/loveTCG/cards/metris/murder/wagonbomb.lua",
		"/F/Love2D Project/loveTCG/lib/util.lua",
		"/F/Love2D Project/loveTCG/cards/metris/conspiracy/subterfuge.lua",
		"/F/Love2D Project/loveTCG/cards/metris/conspiracy/seduce.lua",
		"/F/Love2D Project/loveTCG/cards/metris/conspiracy/undermine.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/hero/esra.lua",
		"/F/Love2D Project/loveTCG/cards/metris/conspiracy/frame.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/slaves/goldpanner.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/slaves/overseer.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/ceremonialdance.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/riteofbrood.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/riteofcambat.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/riteofpassage.lua",
		"/C/Users/Alexar/Downloads/debugWorldDraw.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/slaves/scavengers.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/slaves/orphangang.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/slaves/lerpers.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/carnage.lua",
		"/F/Love2D Project/war of omens/loadCards.lua",
		"/C/Users/Alexar/Desktop/xml/cards.txt",
		"/F/Love2D Project/war of omens/abilities.lua",
		"/F/Love2D Project/loveTCG/cls/card.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/bloodlust.lua",
		"/F/Love2D Project/loveTCG/cls/play.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/festival.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/ritualslaughter.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/repopulate.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/culltheherd.lua",
		"/F/Love2D Project/loveTCG/cardLibs/skirmishLib.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/fertilityoffering.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/feast.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/herdofgoats.lua",
		"/F/Love2D Project/loveTCG/cls/library.lua",
		"/F/Love2D Project/loveTCG/cls/deck.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/warrats.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/ratointment.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/goatpoultice.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/herdofboars.lua",
		"/F/Love2D Project/loveTCG/cls/game.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/herdofaurochs.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/colossalaurochs.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/aurochselixir.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/boarunguent.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/direboar.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/goatoutrider.lua",
		"/C/Users/Alexar/Desktop/screenshot/新建文本文档.txt",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/herdofrats.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/marshall.lua",
		"/F/ss/pac.txt",
		"/F/Love2D Project/loveTCG/lib/delay.lua",
		"/F/Love2D Project/loveTCG/cls/result.lua",
		"/F/Love2D Project/loveTCG/cls/effect.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/faith/malediction.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/hero/madamaline.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/prosperity/harvest.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/hero/sofocatro.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/hero/ysadora.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/faith/liturgy.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/power/spynetwork.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/prosperity/tithe.lua",
		"/C/Users/Alexar/Desktop/新建文本文档.txt",
		"/F/Love2D Project/loveTCG/scenes/builder_scene.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/hero/captainviatrix.lua",
		"/F/Love2D Project/loveTCG/cls/cardDataLoader.lua",
		"/F/Love2D Project/loveTCG/include.lua",
		"/F/Love2D Project/loveTCG/main.lua",
		"/F/Love2D Project/loveTCG/cls/turn.lua",
		"/C/Users/Alexar/Desktop/game/cls/game.lua",
		"/C/Users/Alexar/Desktop/love编译工具/compile.lua",
		"/F/更鸟工作站/MyGame/新建工程/Game.lua",
		"/F/更鸟工作站/MyGame/新建工程/bak/2016-7-22/Game.lua",
		"/F/更鸟工作站/Plugins/3500常用字.txt",
		"/F/Love2D Project/loveTCG/cls/bank.lua",
		"/F/Love2D Project/loveTCG/cls/pocket.lua",
		"/F/Love2D Project/loveTCG/cls/starter.lua",
		"/F/Love2D Project/loveTCG/cls/hand.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/faith/sibyllinescrolls.lua",
		"/F/Love2D Project/loveTCG/cls/info.lua",
		"/F/Love2D Project/loveTCG/cardLibs/test.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/hero/cardinalpocci.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/hero/regentmarsh.lua",
		"/F/Love2D Project/loveTCG/conf.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/coin/vespitolecoin.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/faith/miracle.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/militia.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/mercenary.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/soldier.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/knight.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/rampart.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/leadofcharge.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/warship.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/palisade.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/ballista.lua"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"weak",
			"forgery",
			"coordi",
			"charge",
			"ondying",
			"delay",
			"cardplaycount",
			"sacrif",
			"Fertility Offering ",
			"kill",
			"draw",
			"weakest",
			"reset",
			"kill",
			"refill",
			"lose",
			"delay",
			"back",
			"gold",
			"choose",
			"returncard",
			"print",
			"save",
			"self",
			"print",
			"data",
			"make",
			"frag",
			"builder",
			"shop",
			"mar",
			"wealth",
			"button",
			"card",
			"font",
			"self.selected",
			"font",
			"menu",
			"buttons",
			"scene",
			"builder",
			"button",
			"selector",
			"born",
			"collection",
			"selector",
			"selecto",
			"born",
			"game",
			"goback",
			"self.parent.",
			"goback",
			"deck",
			"money",
			"bank",
			"deck",
			"born",
			"hand",
			"cancel",
			"%platform%",
			"v",
			"img",
			"%platform%",
			")\n",
			"\"()",
			"initialize",
			"game",
			"gamestate",
			"print",
			"10",
			"scale",
			"100",
			"print",
			"post",
			"pos",
			"confirm",
			"print",
			"self.ip",
			"splite",
			"print",
			"msg",
			"print",
			"data",
			"e.",
			"ai",
			"joint",
			"start",
			"ai",
			"	{\"",
			"{\"",
			" {\"",
			"{\"",
			"ai.",
			"sub",
			"refillbank",
			"card.where",
			"show.",
			"default",
			"defaut",
			"frame.upper.hand.defautCardX",
			"defaut",
			"losernd",
			"print",
			"you",
			"discard",
			"lastch",
			"onDie",
			"discard",
			"input",
			"print",
			"frame.you",
			"herodw",
			"where",
			"attackweak",
			"shield",
			"refillba",
			"sheph",
			"sh",
			"bank.refill",
			"\"onTurnStart\",a.heroDraw",
			"rnd=",
			"self.hero",
			"self",
			"recode",
			"reset",
			"ab.actionMove",
			"actionMove",
			"attackcan"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"strongest",
			"firework",
			"result",
			"progress",
			"info",
			"ui",
			"starter",
			"textInput",
			"text",
			"menu",
			"pocket",
			"collection",
			"builder",
			"self.",
			"grave",
			"gold",
			"hero",
			"library",
			"bank",
			"shield",
			"d3d",
			"https://draihvow2bzoy.cloudfront.net/static/img",
			"d3d",
			"state",
			"zoom",
			"needConfirm",
			"cmd",
			"info",
			"deckEditor.",
			"",
			"	{1,\"",
			"{\"1\",\"",
			"delay.",
			"card.belongTo",
			"default",
			"me",
			"onDiscard",
			"op",
			"\"onTurnOver\",a.heroDraw",
			"me.hero",
			"me",
			"record",
			"frame.ab.actionMove",
			"ab.actionMove",
			"me",
			"weakest.hp=100",
			".",
			"cards[i]",
			"unpack(v[i])",
			"make",
			"\"状态\"",
			"a.heroDraw",
			"frame.heroDraw",
			"where",
			"card.belongTo",
			"card",
			"",
			"frame",
			"lower",
			"card:",
			".",
			".you",
			":attack",
			"onSlaught",
			"green",
			"upper",
			"",
			"绿",
			"\"green\"",
			"green",
			"upper",
			"绿",
			"nil",
			"",
			"hero",
			"hand",
			"field",
			"deck",
			"bank",
			"cards",
			"upper.",
			"deck",
			"hero",
			"hand",
			"field",
			"bank",
			"lower.",
			"upper",
			"lower",
			"upper"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "cls/game.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26189,
						"regions":
						{
						},
						"selection":
						[
							[
								20356,
								20368
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 19276.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "cards/endazu/incantations/beholdtheveil.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 674,
						"regions":
						{
						},
						"selection":
						[
							[
								653,
								653
							]
						],
						"settings":
						{
							"auto_name": "beholdtheveil.lua",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 198.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "cls/card.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10062,
						"regions":
						{
						},
						"selection":
						[
							[
								1824,
								1824
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1518.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 175.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Lua Love/LuaLove.sublime-build",
	"project": "tcg.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 212.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
