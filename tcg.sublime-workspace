{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"tab",
				"table.insert	(table, [pos,] value)"
			],
			[
				"mode",
				"love.graphics.setBlendMode"
			],
			[
				"rand",
				"love.math.random"
			],
			[
				"for",
				"fori	for i,v in ipairs()"
			],
			[
				"readydi",
				"readyDiagTime"
			],
			[
				"isd",
				"love.keyboard.isDown"
			],
			[
				"poly",
				"love.graphics.polygon"
			],
			[
				"rnd",
				"love.math.newRandomGenerator"
			],
			[
				"random",
				"love.math.getRandomState"
			],
			[
				"table",
				"table.insert	(table, [pos,] value)"
			],
			[
				"newfon",
				"love.graphics.newFont"
			],
			[
				"firewo",
				"fireworks"
			],
			[
				"attack",
				"attackHero"
			],
			[
				"sh",
				"shadow"
			],
			[
				"shadow",
				"shadowCount"
			],
			[
				"update",
				"updateCanvas"
			],
			[
				"weak",
				"weakest"
			],
			[
				"fro",
				"fori	for i,v in ipairs()"
			],
			[
				"ids",
				"love.mouse.isDown"
			],
			[
				"newim",
				"love.graphics.newImage"
			],
			[
				"hover",
				"hoverCard"
			],
			[
				"print",
				"love.graphics.print"
			],
			[
				"setline",
				"love.graphics.setLineWidth"
			],
			[
				"img_",
				"img_shield"
			],
			[
				"shield",
				"shield_max"
			],
			[
				"circ",
				"love.graphics.circle"
			],
			[
				"newf",
				"love.graphics.newFont"
			],
			[
				"font",
				"love.graphics.setFont"
			],
			[
				"library",
				"libraryData"
			],
			[
				"mssage",
				"message_id"
			],
			[
				"CARD_",
				"CARD_WIDTH"
			],
			[
				"message",
				"message_id"
			],
			[
				"get_",
				"get_position"
			],
			[
				"ray_",
				"ray_norm"
			],
			[
				"ray_w",
				"ray_w4"
			],
			[
				"client_",
				"client_port"
			],
			[
				"getr",
				"love.math.getRandomState"
			],
			[
				"setr",
				"love.math.setRandomState"
			],
			[
				"seed",
				"love.math.setRandomSeed"
			],
			[
				"search",
				"searchForCreate"
			],
			[
				"check",
				"checkSkull"
			],
			[
				"os",
				"os.time	([table])"
			],
			[
				"rad",
				"love.math.setRandomSeed"
			],
			[
				"we",
				"while	while cond"
			],
			[
				"dr",
				"draw()	cell"
			],
			[
				"setcl",
				"love.graphics.setColor"
			],
			[
				"gr",
				"love.graphics.rectangle"
			],
			[
				"new",
				"love.graphics.newParticleSystem"
			],
			[
				"upa",
				"unpack	(list [, i [, j]])"
			],
			[
				"ta",
				"table.insert	(table, [pos,] value)"
			],
			[
				"drawf",
				"drawFromOpDeck"
			],
			[
				"selfk",
				"selfkill10"
			],
			[
				"onAtta",
				"onAttack"
			],
			[
				"alway",
				"cardsAlways_update"
			],
			[
				"string",
				"string.find	(s, pattern [, init [, plain]])"
			],
			[
				"get",
				"love.graphics.getWidth"
			],
			[
				"up",
				"unpack	(list [, i [, j]])"
			],
			[
				"cost_",
				"cost_lvl0"
			],
			[
				"inter",
				"interceptTab"
			],
			[
				"minion",
				"minionTab"
			],
			[
				"abilit",
				"abilities"
			],
			[
				"upperT",
				"upperTurnOver"
			],
			[
				"mouse",
				"love.mouse.getPosition"
			],
			[
				"refill",
				"refillCard"
			],
			[
				"rado",
				"love.math.random"
			],
			[
				"push",
				"love.graphics.push"
			],
			[
				"getpo",
				"love.mouse.getPosition"
			],
			[
				"dra",
				"love.graphics.draw"
			],
			[
				"setc",
				"love.graphics.setColor"
			],
			[
				"set",
				"love.graphics.setFont"
			],
			[
				"can",
				"love.graphics.newCanvas"
			],
			[
				"pic_",
				"pic_front"
			],
			[
				"draw",
				"love.graphics.draw"
			],
			[
				"ve",
				"vec4"
			],
			[
				"vec",
				"vec2"
			],
			[
				"rect",
				"love.graphics.rectangle"
			],
			[
				"v",
				"vec4"
			],
			[
				"setsh",
				"love.graphics.setShader"
			],
			[
				"shad",
				"love.graphics.newShader"
			],
			[
				"to",
				"tostring	(e)"
			],
			[
				"setb",
				"love.graphics.setBackgroundColor"
			],
			[
				"fon",
				"love.graphics.setFont"
			],
			[
				"pri",
				"love.graphics.print"
			],
			[
				"func",
				"function	function"
			]
		]
	},
	"buffers":
	[
		{
			"file": "lib/jump.lua",
			"settings":
			{
				"buffer_size": 709,
				"line_ending": "Windows"
			}
		},
		{
			"file": "cls/game/game.lua",
			"settings":
			{
				"buffer_size": 35171,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Pi=math.pi\nlove.system.run=love.system.openURL\nlg = love.graphics\nlk = love.keyboard\nlm = love.math\nfunction w() return lg.getWidth() end\nfunction h() return lg.getHeight() end\n\n\nfunction love.graphics.hexagon(mode, x,y,l)\n	local i=(l/2)*3^0.5\n	love.graphics.polygon(mode, x,y,x+l,y,x+1.5*l,y+i,x+l,y+2*i,x,y+2*i,x-l*0.5,y+i)\nend\nfunction math.getDistance(x1,y1,x2,y2)\n   return ((x1-x2)^2+(y1-y2)^2)^0.5\nend\nfunction math.axisRot(x,y,rot)\n	return math.cos(rot)*x-math.sin(rot)*y,math.cos(rot)*y+math.sin(rot)*x\nend\n\nfunction math.axisRot_P(x,y,x1,y1,rot)\n  x=x -x1\n  y=y- y1\n  local xx=math.cos(rot)*x-math.sin(rot)*y\n  local yy=math.cos(rot)*y+math.sin(rot)*x\n  return xx+x1,yy+y1\nend\n\nfunction math.sign(x)\n	if x>0 then return 1\n	elseif x<0 then return -1\n	else return 0 end\nend\nfunction math.getRot(x1,y1,x2,y2) --p1->p2 direction\n	if x1==x2 and y1==y2 then return 0 end \n	local angle=math.atan((x1-x2)/(y1-y2))\n	if y1-y2<0 then angle=angle-math.pi end\n	if angle>0 then angle=angle-2*math.pi end\n	if angle==0 then return 0 end\n	return -angle\nend\n\nfunction love.graphics.randomColor()\n	local r=math.random(0,255)\n	local g=math.random(0,255)\n	local b=math.random(0,255)\n	return {r,g,b,255}\nend\nfunction math.polygonTrans(x,y,rot,size,v)\n	local tab={}\n	for i=1,#v/2 do\n		tab[2*i-1],tab[2*i]=math.axisRot(v[2*i-1],v[2*i],rot)\n		tab[2*i-1]=tab[2*i-1]*size+x\n		tab[2*i]=tab[2*i]*size+y\n	end\n	return tab\nend\n\nfunction math.convexHull(verts)\n	local v={}\n	local rt={}\n	local lastK=0\n	local lastX=0\n	local lastY=0\n	local lastRad=0\n	local v_c=#verts/2\n	for i=1,v_c do\n		v[i]={}\n		v[i].x=verts[i*2-2]\n		v[i].y=verts[i*2-1]\n	end\n	local maxY=-1/0\n	local oK=0\n	for k,v in pairs(v) do\n		if v.y>maxY then\n			maxY=v.y\n			oK=k\n		end	\n	end\n	lastK=oK\n	lastX=v[lastK].x\n	lastY=v[lastK].y\n	table.insert(rt,v[lastK].x)\n	table.insert(rt,v[lastK].y)\n	local i=0\n	while i<100 do\n		i=i+1\n		local minRad=2*math.pi\n		local minK=0\n		for k,v in pairs(v) do\n			local rad=math.getRot(lastX,lastY,v.x,v.y,true)\n			if rad and rad>lastRad then\n				if rad<minRad then\n					minRad=rad\n					minK=k\n				end\n			end\n		end\n		if minK==maxK or minK==0 then return rt end\n		lastK=minK\n		lastRad=minRad\n		lastX=v[lastK].x\n		lastY=v[lastK].y\n		table.insert(rt,v[lastK].x)\n		table.insert(rt,v[lastK].y)\n	end\n\nend\n\nfunction math.randomPolygon(count,size)\n	local v={}\n	local rt={}\n	local lastK=0\n	local lastX=0\n	local lastY=0\n	local lastRad=0\n	local v_c=count\n	for i=1,v_c do\n		v[i]={}\n		v[i].x=love.math.random(-50,50)*size\n		v[i].y=love.math.random(-50,50)*size\n	end\n	local maxY=-50*size\n	local oK=0\n	for k,v in pairs(v) do\n		if v.y>maxY then\n			maxY=v.y\n			oK=k\n		end	\n	end\n	lastK=oK\n	lastX=v[lastK].x\n	lastY=v[lastK].y\n	table.insert(rt,v[lastK].x)\n	table.insert(rt,v[lastK].y)\n	local i=0\n	while i<100 do\n		i=i+1\n		local minRad=2*math.pi\n		local minK=0\n		for k,v in pairs(v) do\n			local rad=math.getRot(lastX,lastY,v.x,v.y,true)\n			if rad and rad>lastRad then\n				if rad<minRad then\n					minRad=rad\n					minK=k\n				end\n			end\n		end\n		if minK==maxK or minK==0 then return rt end\n		lastK=minK\n		lastRad=minRad\n		lastX=v[lastK].x\n		lastY=v[lastK].y\n		table.insert(rt,v[lastK].x)\n		table.insert(rt,v[lastK].y)\n	end\nend\nfunction math.round(num, n)\n	if n > 0 then\n		local scale = math.pow(10, n-1)\n		return math.floor(num * scale + 0.5) / scale\n	elseif n < 0 then\n		local scale = math.pow(10, n)\n		return math.floor(num * scale + 0.5) / scale\n	elseif n == 0 then\n		return num\n	end\nend\nfunction math.clamp(a,low,high) --取三者中间的\n	--if a>math.pi then a=a-2*math.pi; end\n	return math.max(low,math.min(a,high))\nend\n\nfunction math.getLoopDist(p1,p2,loop)\n	loop=loop or 2*Pi\n  local dist=math.abs(p1-p2)\n	local dist2=loop-math.abs(p1-p2)\n  if dist>dist2 then dist=dist2 end\n	return dist\nend\n\nfunction table.getIndex(tab,item)\n	if type(tab) ~= \"table\" then return end\n	for k,v in pairs(tab) do\n		if v==item then return k end\n	end\nend\n\nfunction table.removeItem(tab,item)\n   local id = table.getIndex(tab,item)\n   if id then \n   	table.remove(tab,id)\n   end\nend\n\nfunction string.split(str,keyword)\n	local tab={}\n	local index=1\n	local from=1\n	local to=1\n	while true do\n		if string.sub(str,index,index)==keyword then\n			to=index-1\n			if from>to then \n				table.insert(tab, \"\")\n			else\n				table.insert(tab, string.sub(str,from,to))\n			end\n			from=index+1\n		end\n		index=index+1\n		if index>string.len(str) then\n			if from<=string.len(str) then\n				table.insert(tab, string.sub(str,from,string.len(str)))\n			end\n			return tab\n		end\n	end\nend\n\nfunction table.copy(st,copyto,passfunction)\n	copyto=copyto or {}\n	for k, v in pairs(st or {}) do\n		if type(v) == \"table\" then\n			copyto[k] = table.copy(v,copyto[k],passfunction)          \n		elseif type(v) == \"function\" and not passfunction then 		\n			copyto[k] = v\n		else \n			copyto[k] = v\n		end\n	end\n	return copyto\nend\n\nfunction string.generateName(num)\n   local list = {}\n   list[1] = {{'b','c','d','f','g','h','j','l','m','n','p','r','s','t','v','x','z','k','w','y'},{'qu','th','ll','ph'}} --21,4\n   list[2] = {'a','e','i','o','u'} --v\n   random = love.math.newRandomGenerator(os.time())\n   random:setSeed(love.math.random(1,9999))\n   local first = random:random(2)\n   local name = ''\n   local char = ''\n   local nchar = ''\n   --creates first letter(s)\n   if first == 2 then --v\n	  for i=1, random:random(2) do\n		 char = list[2][random:random(#list[2])]\n		 if i == 2 then\n			while char == name do\n			   char = list[2][random:random(#list[2])]\n			end\n			name = name .. char\n		 else\n			name = name .. char\n		 end\n	  end\n   else --c\n	  if random:random(2) == 1 then\n		 for i=1, random:random(2) do\n			char = list[1][1][random:random(#list[1][1])]\n			if i == 2 then\n			   while char == name do\n				  char = list[1][1][random:random(#list[1][1])]\n			   end\n			   name = name .. char\n			else\n			   name = char\n			end\n		 end\n	  else\n		 char = list[1][2][random:random(#list[1][2])]\n		 if char == 'qu' then\n			nchar = list[2][random:random(2,3)]\n			first = 2\n		 end\n		 name = char .. nchar\n	  end\n   end\n\n   --creates the rest of the name\n   local add = ''\n   for i=1,num do\n	  first = first == 1 and 2 or 1 -- change between v and c\n	  add = ''\n	  if first == 2 then --v\n		 for i=1, random:random(2) do\n			char = list[2][random:random(#list[2])]\n			if i == 2 then\n			   while char == add do\n				  char = list[2][random:random(#list[2])]\n			   end\n			   add = add .. char\n			else\n			   add = add .. char\n			end\n		 end\n	  else --c\n		 if random:random(2) == 1 then\n			for i=1, random:random(2) do\n			   char = list[1][1][random:random(#list[1][1])]\n			   if i == 2 then\n				  while char == add do\n					 char = list[1][1][random:random(#list[1][1])]\n				  end\n				  add = add .. char\n			   else\n				  add = add .. char\n			   end\n			end\n		 else\n			char = list[1][2][random:random(#list[1][2])]\n			if char == 'qu' then\n			   nchar = list[2][random:random(2,3)]\n			end\n			add = char .. nchar\n		 end\n	  end\n	  name = name .. add\n   end\n\n   return name\nend\n\nfunction table.save(tab,name)\n	name=name or \"test\"\n	local output=\"local \"..name..\"=\\n\"\n	local function ergodic(target,time)\n		time=time+1\n		output=output..\"{\\n\"\n		for k,v in pairs(target) do\n			output=output .. string.rep(\"\\t\",time)\n			if type(v)==\"table\" then\n				if type(k)==\"number\" then\n					output=output..\"[\"..k..\"]\"..\"=\"\n				elseif type(k)==\"string\" then\n					output=output..\"[\\\"\"..k..\"\\\"]=\"\n				end \n				ergodic(v,time)\n				output=output .. string.rep(\"\\t\",time)\n				output=output..\"},\\n\"\n			elseif type(v)==\"string\" then\n				if type(k)==\"number\" then\n					output=output..\"[\"..k..\"]\"..\"=\\\"\"..v..\"\\\",\\n\"\n				elseif type(k)==\"string\" then\n					output=output..\"[\\\"\"..k..\"\\\"]=\\\"\"..v..\"\\\",\\n\"\n				end \n			elseif type(v)==\"number\" or type(v)==\"boolean\" then\n				if type(k)==\"number\" then\n					output=output..\"[\"..k..\"]\"..\"=\"..tostring(v)..\",\\n\"\n				elseif type(k)==\"string\" then\n					output=output..\"[\\\"\"..k..\"\\\"]=\"..tostring(v)..\",\\n\"\n				end \n			end\n		end\n	end\n	ergodic(tab,0)\n	output=output..\"}\"\n	return output \nend\n\nfunction math.pointTest(x,y,verts)\n	local pX={}\n	local pY={}\n	for i=1,#verts,2 do\n		table.insert(pX, verts[i])\n		table.insert(pY, verts[i+1])\n	end\n	local oddNodes=false\n	local pCount=#pX\n	local j=pCount\n	for i=1,pCount do\n		if ((pY[i]<y and pY[j]>=y) or (pY[j]<y and pY[i]>=y))\n			and (pX[i]<=x or pX[j]<=x) then\n			if pX[i]+(y-pY[i])/(pY[j]-pY[i])*(pX[j]-pX[i])<x then\n				oddNodes=not oddNodes\n			end\n		end\n		j=i\n	end\n	return oddNodes\nend\n\nfunction math.pointTest_xy(x,y,pX,pY)\n	local oddNodes=false\n	local pCount=#pX\n	local j=pCount\n	for i=1,pCount do\n		if ((pY[i]<y and pY[j]>=y) or (pY[j]<y and pY[i]>=y))\n			and (pX[i]<=x or pX[j]<=x) then\n			if pX[i]+(y-pY[i])/(pY[j]-pY[i])*(pX[j]-pX[i])<x then\n				oddNodes=not oddNodes\n			end\n		end\n		j=i\n	end\n	return oddNodes\nend\n\n\nfunction math.polar(x,y) \n  return math.getDistance(x,y,0,0),math.atan2(y, x)\nend\n\nfunction math.cartesian(r,phi)\n  return r*math.cos(phi),r*math.sin(phi)\nend\n\n\nfunction math:RGBtoHSV(r,g,b)\n  local max=math.max(r,g,b)\n  local min=math.min(r,g,b)\n  local d=max-min\n  local v=max\n  local s\n  if v==0 then \n	s=0 \n  else \n	s=1-min/max\n  end\n  local h=0\n  if d~=0 then\n	if r==max then\n	  h=(g-b)/d\n	elseif g==max then\n	  h=2+(b-r)/d\n	elseif b==max then \n	  h=4+(r-g)/d\n	end\n	h=h*60\n	if h<0 then h=h+360 end\n  end\n  return h,s,v\n\nend\n\nfunction math.HSVtoRGB(h,s,v)\n  local r,g,b\n  local x,y,z\n  if s==0 then\n	r=v;g=v;b=v\n  else\n	h=h/60\n	i=math.floor(h)\n	f=h-i\n	x=v*(1-s)\n	y=v*(1-s*f)\n	z=v*(1-s*(1-f))\n  end   \n  if i==0 then\n	r=v;g=z;b=x\n  elseif i==1 then\n	r=y;g=v;b=x\n  elseif i==2 then\n	r=x;g=v;b=z\n  elseif i==3 then\n	r=x;g=y;b=v\n  elseif i==4 then\n	r=z;g=x;b=v\n  elseif i==5 then\n	r=v;g=x;b=y\n  else\n	r=v;g=z;b=x\n  end\n  return math.floor(r),math.floor(g),math.floor(b)\nend\n\n\n\n\n\nfunction love.graphics.drawLightning(x1,y1,x2,y2,displace,curDetail)\n  if displace < curDetail then\n	  love.graphics.line(x1, y1, x2, y2)\n  else \n	local mid_x = (x2+x1)/2;\n	local mid_y = (y2+y1)/2;\n	mid_x = mid_x+(love.math.random()-.5)*displace;\n	mid_y = mid_y+(love.math.random()-.5)*displace;\n	love.graphics.drawLightning(x1,y1,mid_x,mid_y,displace/2,curDetail);\n	love.graphics.drawLightning(x2,y2,mid_x,mid_y,displace/2,curDetail);\n  end\nend\n\n\n\nfunction love.graphics.handwrite_line(displace,curDetail,...)\n  local lines={...}\n  if #lines%2~=0 then error(\"must be 2x\") end\n  for i=1, #lines/2-1 do\n	local px,py=lines[2*i-1],lines[2*i]\n	local px2,py2=lines[2*i+1],lines[2*i+2]\n	love.graphics.drawLightning(px,py,px2,py2,displace,curDetail)\n  end\nend\n\n\n\nfunction table.insertM(tab,...)\n  for i,v in ipairs({...}) do\n	table.insert(tab, v)\n  end\nend\n\n\nfunction math.pointToLine(a,b,c,x,y)\n  return math.abs(a*x+b*y+c)/math.sqrt(a*a+b*b)\nend\n\n\n--source 必须包含.x,.y作为起始坐标，.rot为发射角\n--toTest为待检测table 必须包含 .x,.y,.r作为碰撞球\nfunction math.raycast(source,toTest) \n  local x1,y1=source.x,source.y\n  local x2,y2\n  local dist\n  local dir=source.rot\n  local tan=math.tan(dir)\n  local a=tan\n  local b=-1\n  local c=-x1*tan+y1\n  local rt={}\n  for i,v in ipairs(toTest) do\n	  x2,y2=v.x,v.y\n	  dist=math.pointToLine(a,b,c,x2,y2)\n	  if math.sign(math.cos(dir))~=math.sign(x2-x1) and math.sign(math.sin(dir))~=math.sign(y2-y1) then\n		dist=math.tan(Pi/2)\n	  end\n	  if dist<= v.r then\n		local a2,b2,c2=math.vertToLine(a,b,c,x2,y2)\n		local cx,cy=math.crossPoint(a,b,c,a2,b2,c2)\n		table.insert(rt, {v,cx,cy})\n	  end\n  end\n  return rt\nend\n\n\nfunction math.unitAngle(angle)  --convert angle to 0,2*Pi\n 	return math.asin(math.sin(angle))\nend\n\nfunction math.vertToLine(a,b,c,x,y) --过已知点垂线公式\n  local a2=math.abs(b/a)==1/0 and math.sign(b/a)*math.tan(Pi/2) or b/a\n  return a2,-1,y-a2*x\nend\n\n\nfunction math.crossPoint(a1,b1,c1,a2,b2,c2) --两线交点公式\n  return (b1*c2-b2*c1)/(a1*b2-a2*b1), (a1*c2-a2*c1)/(b1*a2-b2*a1)\nend\n\n\n\nfunction debug.tracebackex()    --局部变量\nlocal ret = \"\"    \nlocal level = 2    \nret = ret .. \"stack traceback:\\n\"    \nwhile true do    \n   --get stack info    \n   local info = debug.getinfo(level, \"Sln\")    \n   if not info then break end    \n   if info.what == \"C\" then                -- C function    \n	ret = ret .. tostring(level) .. \"\\tC function\\n\"    \n   else           -- Lua function    \n	ret = ret .. string.format(\"\\t[%s]:%d in function `%s`\\n\", info.short_src, info.currentline, info.name or \"\")    \n   end    \n   --get local vars    \n   local i = 1    \n   while true do    \n	local name, value = debug.getlocal(level, i)    \n	if not name then break end    \n	ret = ret .. \"\\t\\t\" .. name .. \" =\\t\" .. tostringex(value, 3) .. \"\\n\"    \n	i = i + 1    \n   end      \n   level = level + 1    \nend    \nreturn ret    \nend\n\nfunction table.state(tab)\n	local output={}\n	local function ergodic(target,name)\n		for k,v in pairs(target) do\n			if type(v)==\"table\" then\n				name=name..\"/\"..k\n				output[name]=#v\n				print(name,#v)\n				ergodic(v,name)\n			end\n		end\n	end\n	ergodic(tab,tostring(tab))\n	return output \nend\n\nfunction table.safeRemove(tab,index)\n	local v=tab[#tab]\n	tab[index]=v\n	tab[#tab]=nil\nend\n\n\n\nfunction table.isEmpty(tab)\n	if tab[1] then return false end\n	for k,v in pairs(tab) do\n		return false\n	end\n	return true\nend\n\nfunction string.toTable(str)\n	local tab={}\n	for uchar in string.gfind(str, \"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do tab[#tab+1] = uchar end\n	return tab\nend\n\n\nfunction string.sub_utf8(s, n)    \n	local dropping = string.byte(s, n+1)    \n	if not dropping then return s end    \n	if dropping >= 128 and dropping < 192 then    \n		return string.sub_utf8(s, n-1)    \n	end    \n	return string.sub(s, 1, n)    \nend  \n\nlocal _SetStencil=love.graphics.setStencil\nfunction love.graphics.setStencil(func)\n	if  _SetStencil then \n		_SetStencil(func)\n	else\n		if func then\n			love.graphics.stencil(func)\n			love.graphics.setStencilTest(\"greater\", 0)\n		else\n			love.graphics.setStencilTest()\n		end\n	end\nend\n\n\nfunction love.math.createEllipse(rx,ry,segments)\n	segments = segments or 30\n	local vertices = {}\n	for i=0, segments do\n		local angle = (i / segments) * math.pi * 2\n		local x = math.cos(angle)*rx\n		local y = math.sin(angle)*ry\n		table.insert(vertices, x)\n		table.insert(vertices, y)\n	end	\n	return vertices\nend\n\nfunction table.save(tab,name,ifCopyFunction)\n	name=name or \"default\"\n	local tableList= {{name=\"root\",tab=tab}} --to protect loop\n	local output=\"local \"..name..\"=\\n\"\n	local function ergodic(target,time)\n		time=time+1\n		output=output..\"{\\n\"\n		for k,v in pairs(target) do\n			output=output .. string.rep(\"\\t\",time)\n			local name = \"\"\n			if type(k)==\"number\" then\n				name=\"[\"..k..\"]\"\n			elseif type(k)==\"string\" then\n				name=\"[\\\"\"..k..\"\\\"]\"\n			end \n			if type(v)==\"table\" then\n				output=output .. name ..\"=\"\n				local checkRepeat,repeatTab\n				for _,p in ipairs(tableList) do\n					if v==p.tab then\n						checkRepeat=true\n						repeatTab = p\n						break\n					end\n				end\n				if checkRepeat then\n					output=output..\"table->\"..repeatTab.name..\",\\n\"\n				else\n					table.insert(tableList,{name=name,tab=v})\n					ergodic(v,time)\n					output=output .. string.rep(\"\\t\",time)\n					output=output..\"},\\n\"\n				end\n			elseif type(v)==\"string\" then\n				if string.find(v,\"\\n\") then\n					output=output.. name ..\"=[[\"..v..\"]],\\n\"\n				else\n					output=output.. name ..\"=\\\"\"..v..\"\\\",\\n\"\n				end\n				\n			elseif type(v)==\"number\" or type(v)==\"boolean\" then\n					output=output..name..\"=\"..tostring(v)..\",\\n\"\n			elseif type(v)==\"function\" and ifCopyFunction then\n				output=output .. name ..\"= loadstring(\\\"\"..string.dump(v)..\"\\\")(),\\n\"			\n			\n			end\n		end\n	end\n	ergodic(tab,0)\n	output=output..\"}\\nreturn \"..name\n	--print(output)\n	return output \nend\n\n--return center,area verts[1],verts[2] = x ,y\nfunction math.getPolygonArea(verts) \n	local count=#verts/2\n	local cx,cy=0,0\n	local area = 0\n\n	local refx,refy=0,0\n	for i=1,#verts-1,2 do\n		local p1x,p1y=refx,refy\n		local p2x,p2y=verts[i],verts[i+1]\n		local p3x = i+2>#verts and verts[1] or verts[i+2]\n		local p3y = i+2>#verts and verts[2] or verts[i+3]\n\n		local e1x= p2x-p1x\n		local e1y= p2y-p1y\n		local e2x= p3x-p1x\n		local e2y= p3y-p1y\n\n		local d=math.vec2.cross(e1x,e1y,e2x,e2y)\n		local triAngleArea=0.5*d\n		area=area+triAngleArea\n		cx = cx + triAngleArea*(p1x+p2x+p3x)/3\n		cy = cy + triAngleArea*(p1y+p2y+p3y)/3\n	end\n\n	if area~=0 then\n		cx= cx/area\n		cy= cy/area\n		return cx,cy,math.abs(area)\n	end\nend\n\nlocal function inside(px,py, cp1x,cp1y,cp2x, cp2y)\n    return (cp2x-cp1x)*(py-cp1y) > (cp2y-cp1y)*(px-cp1x)\nend\n \nlocal function intersection(cp1x,cp1y,cp2x, cp2y, sx,sy, ex,ey)\n  local dcx, dcy = cp1x-cp2x, cp1y-cp2y\n  local dpx, dpy = sx-ex, sy-ey\n  local n1 = cp1x*cp2y - cp1y*cp2x\n  local n2 = sx*ey - sy*ex\n  local n3 = 1 / (dcx*dpy - dcy*dpx)\n  local x = (n1*dpx - n2*dcx) * n3\n  local y = (n1*dpy - n2*dcy) * n3\n  return x,y\nend\n \nfunction math.polygonClip(subjectPolygon, clipPolygon)\n  local outputList = subjectPolygon\n  local cp1x = clipPolygon[#clipPolygon-1]\n  local cp1y = clipPolygon[#clipPolygon]\n  for i=1,#clipPolygon-1,2 do\n    local cp2x,cp2y = clipPolygon[i],clipPolygon[i+1]\n    local inputList = outputList\n    outputList={}\n    local sx,sy = inputList[#inputList-1],inputList[#inputList]\n    for i=1,#inputList-1,2 do\n      local ex,ey=inputList[i],inputList[i+1]\n      if inside(ex,ey, cp1x,cp1y,cp2x, cp2y) then\n        if not inside(sx,sy, cp1x,cp1y,cp2x, cp2y ) then\n          local x,y=intersection(cp1x,cp1y,cp2x, cp2y, sx,sy, ex,ey)\n          table.insert(outputList, x)\n          table.insert(outputList, y)\n        end\n        table.insert(outputList, ex)\n        table.insert(outputList, ey)\n      elseif inside(sx,sy, cp1x,cp1y,cp2x, cp2y ) then\n        local x,y=intersection(cp1x,cp1y,cp2x, cp2y, sx,sy, ex,ey)\n        table.insert(outputList, x)\n        table.insert(outputList, y)\n      end\n      sx=ex;sy=ey\n    end\n    cp1x=cp2x;cp1y=cp2y\n  end\n  return outputList\nend\n\nfunction string.path(filename)    \n    return string.match(filename, \"(.+)\\\\[^\\\\]*%.%w+$\") \nend\nfunction string.filename(filename)\n    return string.match(filename, \".+\\\\([^\\\\]*%.%w+)$\") \nend\n\nfunction table.random(tab)\n	return tab[love.math.random(#tab)]\nend\n\nfunction table.pickRandom(tab)\n	local i = love.math.random(#tab)\n	local v = tab[i]\n	table.remove(tab,i)\n	return v\nend\n\nfunction table.max(tab,key)\n	local max\n	local index\n	local value = -1/0\n	for i,v in pairs(tab) do\n		if key  then\n			if v[key]>value then\n				value =v[key]\n				max = v\n				index = i\n			end\n		else\n			if v>value then\n				value =v\n				max = v\n				index = i\n			end\n		end\n	end\n\n	if max then \n		return max , index\n	end\nend\n\nfunction table.min(tab,key)\n	local min\n	local index\n	local value = 1/0\n	for i,v in pairs(tab) do\n		if key  then\n			if v[key]>value then\n				value =v[key]\n				min = v\n				index = i\n			end\n		else\n			if v>value then\n				value =v\n				min = v\n				index = i\n			end\n		end\n	end\n\n	if min then \n		return min , index\n	end\nend\n\nfunction table.combine(...)\n	local rt = {}\n	for i,tab in ipairs({...}) do\n		for i,v in ipairs(tab) do\n			table.insert(rt, v)\n		end\n	end\nend\n\nlocal _print = print\nlocal index = 0\nprint = function(...)	\n	index = index+1\n	return _print(index,...)\nend",
			"file": "lib/util.lua",
			"file_size": 19763,
			"file_write_time": 131166570895930900,
			"settings":
			{
				"buffer_size": 18903,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Alexar/Desktop/love3d/main.lua",
			"settings":
			{
				"buffer_size": 4216,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "local ai = {}\n\nfunction ai.chooseShow(game)\n	if #game.show.cards==0 then return end\n	local card = table.max(game.show.cards,\"price\")\n	if card then\n		return game:chooseCard(card)\n	end\nend\n\nfunction ai.supplyTarget(game)\n	if not game.my.needTarget then return end\n	local foe = table.combine(game.your.play.cards,game.your.hand.cards,game.your.bank.cards)\n	local target = table.max(foe,\"price\")\n	if target then\n		local result = game.my.targetSelected(game,target)\n		if result then\n			game.my.needTarget= false\n			return true\n		end \n	end\nend\n\n\nfunction ai.playHand(game)\n	local card = game.my.hand.cards[1]\n	if card then\n		return game:playCard(card)\n	end\nend\n\nfunction ai.feedAlly(game)\n	for i,card in ipairs(game.my.play.cards) do\n		if card.hp and card.hp<card.hp_max then	\n			return game:feedCard(card)\n		end\n	end\nend\n\n\nfunction ai.aimFoe(game)\n	for i,card in ipairs(game.your.play.cards) do\n		if card.hp then	\n			return game:attackCard(card)\n		end\n	end\nend\n\nfunction ai.buyBank(game)\n	for i,card in ipairs(game.my.bank.cards) do\n		if game:buyCard(card) then return true end\n	end\nend\n\nfunction ai.feedHero(game)\n	if game.my.resource.hp < 10 then\n		return game:feedCard(game.my.hero.card)\n	end\nend\n\nfunction ai.attackHero(game)\n	if game.your.resource.hp<= game.my.resource.skull + game.my.resource.magic then\n		return game:attackCard(game.your.hero.card)\n	end\nend\n\nfunction ai:getRule(data,aifuncs)\n	local funcs={}\n	for i,v in ipairs(data) do\n		if self[v] then\n			table.insert(funcs, self[v])\n		else \n			if aifuncs and aifuncs[v] then\n				table.insert(funcs, aifuncs[v])\n			end\n		end\n			\n	end\n	return funcs\nend\n\nreturn ai",
			"file": "cls/game/ai.lua",
			"file_size": 1958,
			"file_write_time": 131166562797661198,
			"settings":
			{
				"buffer_size": 1618,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 304 files for \"needtarget\"\n\nF:\\Love2D Project\\loveTCG\\cards\\endazu\\incantations\\banishinggust.lua:\n   28  	end,\n   29  	onPlay = function (card,game)\n   30: 		game.my.needTarget = true\n   31  		game.my.targetSelected = function(game,target)\n   32  			if target.current == game.my.deck or target.current == game.your.deck then return end\n\nF:\\Love2D Project\\loveTCG\\cards\\endazu\\incantations\\odashirsecho.lua:\n   28  	end,\n   29  	onPlay = function (card,game)\n   30: 		game.my.needTarget = true\n   31  		game.my.targetSelected = function(game,target)\n   32  			if target.current == game.my.deck or target.current == game.your.deck then return end\n\nF:\\Love2D Project\\loveTCG\\cards\\endazu\\incantations\\wordofunmaking.lua:\n   29  	end,\n   30  	onPlay = function (card,game)\n   31: 		game.my.needTarget = true\n   32  		game.my.targetSelected = function(game,target)\n   33  			if target.current == game.my.deck or target.current == game.your.deck then return end\n\nF:\\Love2D Project\\loveTCG\\cls\\game\\game.lua:\n  200  	end\n  201  \n  202: 	if self.my.needTarget or self.your.needTarget then\n  203  		love.graphics.setFont(self.font_content)\n  204  		love.graphics.printf(\"select a target\", -300, -50, 600, \"center\")\n  ...\n  373  	end\n  374  \n  375: 	if self.my.needTarget then \n  376  		local result = self.my.targetSelected(self,self.hoverCard)\n  377  		if result then\n  378: 			self.my.needTarget= false\n  379  		end \n  380  	end\n\n7 matches across 4 files\n",
			"settings":
			{
				"buffer_size": 1459,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "cls/game/result.lua",
			"settings":
			{
				"buffer_size": 3569,
				"line_ending": "Windows"
			}
		},
		{
			"file": "net/main.lua",
			"settings":
			{
				"buffer_size": 5625,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Lua Love/LuaLove.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					""
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"Run"
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"Love2D"
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"ldoc: File"
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"ldoc: Project"
				]
			],
			[
				"Packages/Lua Love/LuaLove.sublime-build",
				"Love2D"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Add Channel"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"",
				"Build: Run"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			]
		],
		"width": 408.0
	},
	"console":
	{
		"height": 140.0,
		"history":
		[
			"Love2D",
			"love2d",
			"build",
			"Build",
			"Love2D",
			"Love2d",
			"love2d",
			"build"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/Love2D Project/loveTCG",
		"/F/Love2D Project/loveTCG/cardLibs",
		"/F/Love2D Project/loveTCG/cards",
		"/F/Love2D Project/loveTCG/cls",
		"/F/Love2D Project/loveTCG/cls/game",
		"/F/Love2D Project/loveTCG/cls/ui",
		"/F/Love2D Project/loveTCG/lib"
	],
	"file_history":
	[
		"/C/Users/Alexar/Desktop/love3d/main.lua",
		"/C/Users/Alexar/Desktop/love3d/love3d/init.lua",
		"/F/Love2D Project/loveTCG/cards/endazu/incantations/odashirsecho.lua",
		"/F/Love2D Project/loveTCG/cards/endazu/incantations/wordofunmaking.lua",
		"/F/Love2D Project/loveTCG/cards/endazu/incantations/banishinggust.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/hero/esra.lua",
		"/F/Love2D Project/loveTCG/cls/ui/menu.lua",
		"/F/Love2D Project/loveTCG/cls/game/game.lua",
		"/F/Love2D Project/loveTCG/cls/builder/builder.lua",
		"/F/Love2D Project/loveTCG/cls/builder/menu.lua",
		"/F/Love2D Project/loveTCG/cards/summon/berserker.lua",
		"/F/Love2D Project/loveTCG/cards/summon/fireship.lua",
		"/F/Love2D Project/loveTCG/cardLibs/tutorial1.lua",
		"/C/Users/Alexar/Desktop/love编译工具/compile.lua",
		"/F/Love2D Project/loveTCG/cls/builder/collection.lua",
		"/F/Love2D Project/loveTCG/cls/game/story.lua",
		"/F/Love2D Project/loveTCG/lib/delay.lua",
		"/C/Users/Alexar/Desktop/LoveCraft/main.lua",
		"/F/Love2D Project/loveTCG/cls/builder/starter.lua",
		"/F/Love2D Project/loveTCG/cls/ui/text.lua",
		"/F/Love2D Project/loveTCG/cls/builder/shop.lua",
		"/F/Love2D Project/loveTCG/cls/ui/button.lua",
		"/C/Users/Alexar/Desktop/woo规则.txt",
		"/F/Love2D Project/loveTCG/woo规则.txt",
		"/F/Love2D Project/loveTCG/cls/game/result.lua",
		"/F/Love2D Project/loveTCG/include.lua",
		"/F/Love2D Project/loveTCG/cls/builder/info.lua",
		"/F/Love2D Project/loveTCG/cls/ui/console.lua",
		"/F/Love2D Project/loveTCG/cls/table/bank.lua",
		"/F/Love2D Project/loveTCG/cls/table/deck.lua",
		"/F/Love2D Project/loveTCG/cls/table/hand.lua",
		"/F/Love2D Project/loveTCG/cls/ui/indicator.lua",
		"/F/Love2D Project/loveTCG/cardLibs/tutorial.lua",
		"/F/Love2D Project/loveTCG/cls/ui/turn.lua",
		"/F/Love2D Project/loveTCG/cls/ui/dialogbub.lua",
		"/F/Love2D Project/loveTCG/cls/table/hero.lua",
		"/F/Love2D Project/loveTCG/cls/table/play.lua",
		"/F/Love2D Project/loveTCG/cardLibs/skirmishLib.lua",
		"/F/Love2D Project/loveTCG/cls/table/turn.lua",
		"/F/Love2D Project/loveTCG/cls/ui/cursor.lua",
		"/F/Love2D Project/loveTCG/cls/game/ai.lua",
		"/F/Love2D Project/loveTCG/lib/action.lua",
		"/F/Love2D Project/loveTCG/scenes/start_scene.lua",
		"/F/Love2D Project/loveTCG/scenes/shop_scene.lua",
		"/F/Love2D Project/loveTCG/cls/table/debug.lua",
		"/F/Love2D Project/loveTCG/cls/table/library.lua",
		"/F/Love2D Project/loveTCG/scenes/result_scene.lua",
		"/F/Love2D Project/loveTCG/cards/endazu/incantations/summoningrift.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/idols/herdingstones.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/ratointment.lua",
		"/F/Love2D Project/loveTCG/cards/coins/kongregate.lua",
		"/F/Love2D Project/loveTCG/cls/dialogbub.lua",
		"/F/Love2D Project/loveTCG/main.lua",
		"/F/Love2D Project/loveTCG/scenes/game_scene.lua",
		"/F/Love2D Project/loveTCG/cls/builder/selector.lua",
		"/F/Love2D Project/loveTCG/cls/builder/pocket.lua",
		"/F/Love2D Project/loveTCG/cls/starter.lua",
		"/F/Love2D Project/loveTCG/cls/game.lua",
		"/F/Love2D Project/loveTCG/cls/action123.lua",
		"/F/Love2D Project/loveTCG/scenes/builder_scene.lua",
		"/F/Love2D Project/loveTCG/cls/game/debug.lua",
		"/F/Love2D Project/loveTCG/lib/gamedialog.lua",
		"/F/Love2D Project/loveTCG/lib/jump.lua",
		"/F/Love2D Project/loveTCG/gamemenu.lua",
		"/F/Love2D Project/loveTCG/cls/menu.lua",
		"/F/Love2D Project/loveTCG/lib/loader.lua",
		"/F/Love2D Project/loveTCG/lib/warpper.lua",
		"/F/Love2D Project/loveTCG/cls/action.lua",
		"/C/Users/Alexar/Desktop/screenshot/system.txt",
		"/F/Love2D Project/loveTCG/cls/card.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/festival.lua",
		"/F/Love2D Project/loveTCG/cards/metris/conspiracy/seduce.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/impersonate.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/apothecary.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/informant.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/lackey.lua",
		"/F/Love2D Project/loveTCG/net/client.lua",
		"/F/Love2D Project/loveTCG/cards/coins/bantlingcrown.lua",
		"/F/Love2D Project/loveTCG/cards/coins/championspaiza.lua",
		"/F/Love2D Project/loveTCG/cards/coins/crossandpile.lua",
		"/F/Love2D Project/loveTCG/cards/coins/divinercharms.lua",
		"/F/Love2D Project/loveTCG/cards/coins/fecundcharm.lua",
		"/F/Love2D Project/loveTCG/cards/coins/ferrymanstoll.lua",
		"/F/Love2D Project/loveTCG/cards/coins/foolsgeld.lua",
		"/F/Love2D Project/loveTCG/cards/coins/gravelinedrachm.lua",
		"/F/Love2D Project/loveTCG/cards/coins/humblebundle.lua",
		"/F/Love2D Project/loveTCG/cards/coins/obolcornucopia.lua",
		"/F/Love2D Project/loveTCG/cards/coins/serpentsseal.lua",
		"/F/Love2D Project/loveTCG/cards/coins/swindlersmark.lua",
		"/F/Love2D Project/loveTCG/cards/coins/vicardoubloon.lua",
		"/F/Love2D Project/loveTCG/cards/coins/wergeldseax.lua",
		"/F/Love2D Project/loveTCG/cards/coins/wishingcoin.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/colossalaurochs.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/goatoutrider.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/herd/herdofaurochs.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/hero/babarus.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/hero/liet.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/hero/tazin.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/idols/serpentaltar.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/idols/shrineofrebirth.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/slaves/ratcatcher.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/slaves/scavengers.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/slaves/scrivener.lua",
		"/F/Love2D Project/loveTCG/cards/metris/conspiracy/consolidate.lua",
		"/F/Love2D Project/loveTCG/cards/metris/espionage/ramsack.lua",
		"/F/Love2D Project/loveTCG/cards/metris/hero/birondelle.lua",
		"/F/Love2D Project/loveTCG/cards/metris/hero/gretta.lua",
		"/F/Love2D Project/loveTCG/cards/metris/hero/loquori.lua",
		"/F/Love2D Project/loveTCG/cards/metris/hero/theodox.lua",
		"/F/Love2D Project/loveTCG/cards/metris/hero/valdorian.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/assassin.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/bodyguard.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/brigand.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/brute.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/charlatan.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/cutpurse.lua",
		"/F/Love2D Project/loveTCG/cards/metris/underlings/tavernwench.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/hero/regentmarsh.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/hero/ysadora.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/mercenary.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/militia.lua",
		"/F/Love2D Project/loveTCG/cards/vespitole/war/soldier.lua",
		"/F/Love2D Project/loveTCG/lib/random.lua",
		"/F/Love2D Project/loveTCG/lib/ai.lua",
		"/F/Love2D Project/loveTCG/net/sock.lua",
		"/F/Love2D Project/loveTCG/lib/sock.lua",
		"/F/Love2D Project/loveTCG/cards/daramek/rituals/fertilityoffering.lua",
		"/F/Love2D Project/loveTCG/server/server.lua"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"",
			"F:\\Love2D Project\\loveTCG\\cards",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"needtar",
			"needtarget",
			"checkgameover",
			"winner",
			"Info",
			"keyLock",
			"story",
			"delay",
			"game",
			"self.game",
			"cursor",
			"action",
			"delay",
			"console",
			"self.debug",
			"cardData",
			"require*action",
			"action",
			"loader",
			"同盟",
			"price",
			"tablename",
			"table.random",
			"love.math.random",
			"random",
			"print",
			"debug",
			"ai",
			"max",
			"optionsCards",
			"getposfor",
			"print",
			"if",
			"local function ",
			"onFoeAttack",
			"self",
			"onAnyAttack",
			"feedall",
			"userturn",
			"game over",
			"shop",
			"starter",
			"effect(",
			"effect",
			"turnb",
			"killcard",
			"print",
			"game",
			"race",
			"lost",
			"deck",
			"hand",
			"game",
			"size",
			"deck",
			"discrip",
			"cancel",
			"%platform%",
			"v",
			"img",
			"%platform%",
			")\n",
			"\"()",
			"initialize",
			"game",
			"gamestate",
			"print",
			"10",
			"scale",
			"100",
			"print",
			"post",
			"pos",
			"confirm",
			"print",
			"self.ip",
			"splite",
			"print",
			"msg",
			"print",
			"data",
			"e.",
			"ai",
			"joint",
			"start",
			"ai",
			"	{\"",
			"{\"",
			" {\"",
			"{\"",
			"ai.",
			"sub",
			"refillbank",
			"card.where",
			"show.",
			"default",
			"defaut",
			"frame.upper.hand.defautCardX",
			"defaut",
			"losernd",
			"print",
			"you",
			"discard",
			"lastch",
			"onDie",
			"discard",
			"input",
			"print",
			"frame.you",
			"herodw",
			"where",
			"attackweak",
			"shield",
			"refillba",
			"sheph",
			"sh",
			"bank.refill",
			"\"onTurnStart\",a.heroDraw",
			"rnd=",
			"self.hero",
			"self",
			"recode",
			"reset",
			"ab.actionMove",
			"actionMove",
			"attackcan",
			"lower",
			"hp=100"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"lockInput",
			"parent",
			"self.parent",
			"jump",
			"随从",
			"game.rnd:table",
			"game.rnd:random",
			"min",
			"function ai.",
			"game",
			"userside",
			"info",
			"shop",
			"Effect(self,",
			"self",
			"faction",
			"lose",
			"show",
			"play",
			"self",
			"scale",
			"hand",
			"descrip",
			"shield",
			"d3d",
			"https://draihvow2bzoy.cloudfront.net/static/img",
			"d3d",
			"state",
			"zoom",
			"needConfirm",
			"cmd",
			"info",
			"deckEditor.",
			"",
			"	{1,\"",
			"{\"1\",\"",
			"delay.",
			"card.belongTo",
			"default",
			"me",
			"onDiscard",
			"op",
			"\"onTurnOver\",a.heroDraw",
			"me.hero",
			"me",
			"record",
			"frame.ab.actionMove",
			"ab.actionMove",
			"me",
			"weakest.hp=100",
			".",
			"cards[i]",
			"unpack(v[i])",
			"make",
			"\"状态\"",
			"a.heroDraw",
			"frame.heroDraw",
			"where",
			"card.belongTo",
			"card",
			"",
			"frame",
			"lower",
			"card:",
			".",
			".you",
			":attack",
			"onSlaught",
			"green",
			"upper",
			"",
			"绿",
			"\"green\"",
			"green",
			"upper",
			"绿",
			"nil",
			"",
			"hero",
			"hand",
			"field",
			"deck",
			"bank",
			"cards",
			"upper.",
			"deck",
			"hero",
			"hand",
			"field",
			"bank",
			"lower.",
			"upper",
			"lower",
			"upper"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "lib/jump.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 709,
						"regions":
						{
						},
						"selection":
						[
							[
								394,
								394
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "cls/game/game.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35171,
						"regions":
						{
						},
						"selection":
						[
							[
								8041,
								8041
							]
						],
						"settings":
						{
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 9065.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/util.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18903,
						"regions":
						{
						},
						"selection":
						[
							[
								18818,
								18818
							]
						],
						"settings":
						{
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 18689.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/Alexar/Desktop/love3d/main.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4216,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "cls/game/ai.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1618,
						"regions":
						{
						},
						"selection":
						[
							[
								352,
								352
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1459,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										177,
										187
									],
									[
										486,
										496
									],
									[
										797,
										807
									],
									[
										1052,
										1062
									],
									[
										1076,
										1086
									],
									[
										1262,
										1272
									],
									[
										1389,
										1399
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								391,
								391
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "cls/game/result.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3569,
						"regions":
						{
						},
						"selection":
						[
							[
								463,
								463
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 132.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "net/main.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5625,
						"regions":
						{
						},
						"selection":
						[
							[
								4713,
								4713
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3696.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Lua Love/LuaLove.sublime-build",
	"project": "tcg.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"F:\\Love2D Project\\lovengine\\1.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 252.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
